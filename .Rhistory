ls(a)
is(a)
pi:6
6:pi
x <- seq(3:5, length=10)
x <- seq(3,5, length=10)
is(x)
x <- seq(3,5, length=3)
is(x)
x <- 3:5
3:5 + 1:10
3:5 + c(1,1,1,1,1,1,1,1,1,1)
ls(rnorm)
environment(rnorm)
ls(environment(rnorm))
environment(rnorm)
z <- function(x){}
z
z <- function(x){
print(x)
}
z
z(3)
environment(z)
(1:3) > c(1,2,3,4,5)
1 && 1
1 && c(1,0,1,1)
1 & c(1,0,1,1)
c(1,0,1,1) && 1
c(1,0,1,1) && 0
c(1,0,1,1) && c(1,0)
isTRUE(c(1,1,0,1))
isTRUE(c(TRUE,FALSE)
)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
install_from_swirl("R programming")
install_from_swirl("R Programming")
ls()
swirl()
head(flags)
dim(flags)
play()
summary(flags)
nxt()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
View(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
View(shape_mat)
unique_vals
sapply(unique_vals,length)
unique_vals<-sapply(flags,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, summary
)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Species,iris$Sepal.Length,mean)
warnings()
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
data(mtcars)
?mtcars
class(mtcars)
info(mtcars)
summary(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
lappy(mtcars,mean)
lapply(mtcars,mean)
with(mtcars,tapply(mpg,cyl,mean))
apply(mtcars,2,mean)
sapply(mtcars,cyl,mean)
split(mtcars,mtcars$cyl)
?mtcars
a <- tapply(mtcars$hp,mtcars$cyl,mean)
a
a[1]
a[3]-a[1]
debug(ls)
ls()
getwd()
set.seed(1)
rpois(5, 2)
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
y
?rbinom
?Rprog
?Rprof
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4,replace=TRUE)
sample(1:6, 4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10,)
letter()
letters()
?letters
letters
LETTERS
sample(LETTERS)
flips <- sample(0:1,100,replace=TRUE,prob = c(0.3, 0.7))
0:1
flips <- sample(c(0,1), 100, replace =TRUE, prob = c(0.3, 0.7))
play()
c(0,1)
0:1
nxt()
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(c(0,1), size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
info()
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
str(my_pois)
my_pois
cm <- colMeans(my_pois)
hist(cm)
?par
par
getwd()
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
swirl()
packageVersion("swirl")
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4,col="magenta")
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(data=pollution,pm25~region,col="red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
plot(pollution$latitude,pollution$pm25)
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$pm25,col=pollution$region)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off()
getwd()
swirl()
head(cars)
with(car,plot(speed,dist))
with(cars,plot(speed,dist))
test(mean(cars$speed),max(cars$dist),"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality,Month==5)
points(may$Wind,may$Ozone,pch=24,col="blue")
points(may$Wind,may$Ozone,pch=17,col="blue")
notmay <- subset(airquality,Month!=5)
points(may$Wind,may$Ozone,pch="*",col="red")
points(may$Wind,may$Ozone,pch=8,col="red")
points(notmay$Wind,notmay$Ozone,pch=8,col="red")
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$@Wind,lty=2,lwd=2))
abline(v=median(airquality$Wind,lty=2,lwd=2))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
swirl()
getwd()
setwd("Desktop/Coursera/DataSci/ExpData/ExData_Plotting1/")
getwd()
pwd
dir()
getwd()
?unzip
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL,"ExpData_Dataset_1.zip",method="curl")
filelist <- unzip("ExpData_Dataset_1.zip",list=TRUE)
filelist
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL,"ExpData_Dataset_1.zip",method="curl")
filelist <- unzip("ExpData_Dataset_1.zip",list=TRUE)
filelist
unzip("ExpData_Dataset_1.zip")
dir()
df <- read.csv("household_power_consumption.txt", sep=";", na.strings="?")
str(df)
a <- strptime(df$Date, format = "%d/%m/%Y") + strptime(df$Time, format = "%H:%M:%S")
a <- as.Date(df$Date, format = "%d/%m/%Y") + as.Date(df$Time, format = "%H:%M:%S")
a <- strptime(paste(df$Date, df$Time), format = "%d/%m/%Y %H:%M:%S")
str(a)
a[1]
a[1]> as.Date("2006/12/15")
a[1]> strptime("2006/12/15",format="%Y/%m/%d")
a[1]> strptime("2006/12/16",format="%Y/%m/%d")
a[1]> strptime("2006/12/17",format="%Y/%m/%d")
a[1]
strptime("2006/12/17",format="%Y/%m/%d")
b<-strptime("2006/12/17",format="%Y/%m/%d")
str(a)
str(b)
as.numeric(b)
as.numeric(a[1])
a[1]
b
1166331600-1166331600
1166331600-1166307840
str(df)
df$datetime <- strptime(paste(df$Date, df$Time), format = "%d/%m/%Y %H:%M:%S")
str(df)
head(df)
a <- subset(df,
datetime >= strptime("2007/2/1", format="%Y/%m/%d") &
datetime <  strptime("2007/2/3",format="%Y/%m/%d") )
head(a)
tail(df)
tail(a)
df <- 1
df <- a
summary(a)
str(df)
as.Date(df$datetime[1],"%a")
as.Date(df$datetime[1],format="%a")
strptime(df$datetime[1],format="%a")
strftime(df$datetime[1],format="%a")
strftime(df$datetime[2880],format="%a")
names(df)
hist(df$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
par
par()
plot.new()  # set all par() to defaults
hist(df$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
plot.new()
hist(df$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.copy(png,file="plot1.png")
dev.off()
par(margin())
png(file="plot1.png")
hist(df$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
plot.new()  # set all par() to defaults
plot(df$datetime,df$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
axis.Date(side=1, df$datetime, format="%a")
plot.new()  # set all par() to defaults
png(file="plot2.png")
plot(df$datetime,df$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
axis.Date(side=1, df$datetime, format="%a")
dev.off()
names(df)
plot.new()  # set all par() to defaults
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
plot(df$datetime, df$Sub_metering_2, col="red", type="l", xlab="",
ylab="")
plot(df$datetime, df$Sub_metering_3, col="blue", type="l", xlab="",
ylab="")
axis.Date(side=1, df$datetime, format="%a")
legend("topright")
plot.new()  # set all par() to defaults
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot.new()  # set all par() to defaults
png(file="plot2.png")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
plot.new()  # set all par() to defaults
png(file="plot3.png")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
dev.off()
plot.new()  # set all par() to defaults
png(file="plot3.png")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lty=1)
dev.off()
plot.new()  # set all par() to defaults
png(file="plot2.png")
plot(df$datetime, df$Global_active_power, type="l", xlab="",
ylab="Global Active Power (kilowatts)")
axis.Date(side=1, df$datetime, format="%a")
dev.off()
plot.new()  # set all par() to defaults
png(file="plot3.png")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lty=1)
dev.off()
mfrow
names(df)
plot.new()  # set all par() to defaults
par(mfrow(c(2,2)))
png(file="plot4.png")
plot(df$datetime, df$Global_active_power, type="l", xlab="",
ylab="Global Active Power")
axis.Date(side=1, df$datetime, format="%a")
plot(df$datetime, df$Voltage, type="l", xlab="datetime",
ylab="Voltage")
axis.Date(side=1, df$datetime, format="%a")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lty=1, bty="n")
plot(df$datetime, df$Global_reactive_power, type="l", xlab="datetime",
ylab="Global_reactive_power")
axis.Date(side=1, df$datetime, format="%a")
dev.off()
plot.new()  # set all par() to defaults
par(mfrow=c(2,2))
png(file="plot4.png")
plot(df$datetime, df$Global_active_power, type="l", xlab="",
ylab="Global Active Power")
axis.Date(side=1, df$datetime, format="%a")
plot(df$datetime, df$Voltage, type="l", xlab="datetime",
ylab="Voltage")
axis.Date(side=1, df$datetime, format="%a")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lty=1, bty="n")
plot(df$datetime, df$Global_reactive_power, type="l", xlab="datetime",
ylab="Global_reactive_power")
axis.Date(side=1, df$datetime, format="%a")
dev.off()
plot.new()  # set all par() to defaults
png(file="plot4.png")
par(mfrow=c(2,2))
plot(df$datetime, df$Global_active_power, type="l", xlab="",
ylab="Global Active Power")
axis.Date(side=1, df$datetime, format="%a")
plot(df$datetime, df$Voltage, type="l", xlab="datetime",
ylab="Voltage")
axis.Date(side=1, df$datetime, format="%a")
plot(df$datetime, df$Sub_metering_1, col="black", type="l", xlab="",
ylab="Energy sub metering")
lines(df$datetime, df$Sub_metering_2, col="red")
lines(df$datetime, df$Sub_metering_3, col="blue")
axis.Date(side=1, df$datetime, format="%a")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lty=1, bty="n")
plot(df$datetime, df$Global_reactive_power, type="l", xlab="datetime",
ylab="Global_reactive_power")
axis.Date(side=1, df$datetime, format="%a")
dev.off()
